version: '3.8'

# RehearseKit - TrueNAS SCALE Deployment
# This compose file is optimized for TrueNAS SCALE custom app deployment
# Assumes PostgreSQL is running separately on TrueNAS

services:
  # Frontend - Next.js 14
  frontend:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/rehearsekit-frontend:${IMAGE_TAG:-latest}
    container_name: rehearsekit-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    build:
      context: ${FRONTEND_BUILD_CONTEXT:-.}
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_APP_NAME=RehearseKit
    environment:
      - NODE_ENV=production
      # No NEXT_PUBLIC_API_URL or NEXT_PUBLIC_WS_URL - using runtime detection
      - NEXT_PUBLIC_APP_NAME=RehearseKit
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=${NEXT_PUBLIC_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    networks:
      - rehearsekit-network
    depends_on:
      - backend
      - websocket
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.rehearsekit.service=frontend"
      - "com.rehearsekit.version=${IMAGE_TAG:-latest}"

  # Backend - FastAPI
  backend:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/rehearsekit-backend:${IMAGE_TAG:-latest}
    container_name: rehearsekit-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database - Connect to existing TrueNAS PostgreSQL
      - DATABASE_URL=${DATABASE_URL}
      
      # Redis - Existing TrueNAS Redis app
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      
      # Storage - Local mode with TrueNAS volumes
      - STORAGE_MODE=local
      - LOCAL_STORAGE_PATH=/mnt/storage/rehearsekit
      
      # GCS (not used in TrueNAS mode, but required by config)
      - GCS_BUCKET_UPLOADS=local-uploads
      - GCS_BUCKET_STEMS=local-stems
      - GCS_BUCKET_PACKAGES=local-packages
      
      # Application
      - APP_ENV=production
      - DEBUG=false
      
      # Authentication
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      
      # CORS uses defaults from code (includes localhost:3000, etc.)
      # Don't set CORS_ORIGINS here - Pydantic expects JSON array
    volumes:
      # TrueNAS dataset mounted to /mnt/storage/rehearsekit
      - ${STORAGE_PATH:-/mnt/tank/apps/rehearsekit/storage}:/mnt/storage/rehearsekit
    networks:
      - rehearsekit-network
    # No depends_on for Redis since it's external
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/api/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.rehearsekit.service=backend"
      - "com.rehearsekit.version=${IMAGE_TAG:-latest}"

  # WebSocket Service
  websocket:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/rehearsekit-websocket:${IMAGE_TAG:-latest}
    container_name: rehearsekit-websocket
    restart: unless-stopped
    ports:
      - "${WEBSOCKET_PORT:-8001}:8001"
    environment:
      - REDIS_URL=${REDIS_URL}
    networks:
      - rehearsekit-network
    # No depends_on for Redis since it's external
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "com.rehearsekit.service=websocket"
      - "com.rehearsekit.version=${IMAGE_TAG:-latest}"

  # Celery Worker
  worker:
    image: ${DOCKER_REGISTRY:-docker.io}/${DOCKER_USERNAME}/rehearsekit-backend:${IMAGE_TAG:-latest}
    container_name: rehearsekit-worker
    restart: unless-stopped
    command: celery -A app.celery_app worker --loglevel=info --concurrency=2
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL}
      
      # Redis - Existing TrueNAS Redis app
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${REDIS_URL}
      - CELERY_RESULT_BACKEND=${REDIS_URL}
      
      # Storage
      - STORAGE_MODE=local
      - LOCAL_STORAGE_PATH=/mnt/storage/rehearsekit
      
      # GCS (not used)
      - GCS_BUCKET_UPLOADS=local-uploads
      - GCS_BUCKET_STEMS=local-stems
      - GCS_BUCKET_PACKAGES=local-packages
    volumes:
      # Shared storage with backend
      - ${STORAGE_PATH:-/mnt/tank/apps/rehearsekit/storage}:/mnt/storage/rehearsekit
    networks:
      - rehearsekit-network
    depends_on:
      - backend
      # Redis is external, not a container
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "com.rehearsekit.service=worker"
      - "com.rehearsekit.version=${IMAGE_TAG:-latest}"
    # Resource limits (adjust based on your TrueNAS hardware)
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # NOTE: Redis is NOT deployed here - using existing TrueNAS Redis
  # The existing Redis app at 10.0.0.155:6379 is used instead
  # If you need a separate Redis, uncomment below:
  #
  # redis:
  #   image: redis:7-alpine
  #   container_name: rehearsekit-redis
  #   restart: unless-stopped
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
  #   volumes:
  #     - ${REDIS_DATA_PATH:-/mnt/Odin/apps/rehearsekit/redis}:/data
  #   networks:
  #     - rehearsekit-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Optional: Nginx reverse proxy for single-port access
  # Uncomment if you want to access everything through port 80/443
  # nginx:
  #   image: nginx:alpine
  #   container_name: rehearsekit-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ${SSL_CERT_PATH:-./certs}:/etc/nginx/certs:ro
  #   networks:
  #     - rehearsekit-network
  #   depends_on:
  #     - frontend
  #     - backend
  #     - websocket

networks:
  rehearsekit-network:
    driver: bridge

# Notes:
# - PostgreSQL is NOT included (use existing TrueNAS PostgreSQL)
# - Storage volumes should be created as TrueNAS datasets
# - Adjust resource limits based on your hardware
# - Set environment variables in .env file (see .env.example)

