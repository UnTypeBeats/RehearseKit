{
  "permissions": {
    "allow": [
      "Bash(cat:*)",
      "Bash(tree:*)",
      "Bash(find:*)",
      "Bash(git log:*)",
      "Bash(if [ -f .next/build-manifest.json ])",
      "Bash(then du -sh .next)",
      "Bash(else echo \"Build not found - run ''npm run build'' first\")",
      "Bash(fi)",
      "Bash(npm audit:*)",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(curl:*)",
      "Bash(git add:*)",
      "Bash(git restore:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nFix Google OAuth on staging - complete solution\n\nThis commit fixes all Google authentication issues on staging (rehearsekit.uk):\n\n**Root Causes Fixed:**\n1. Backend was missing Google OAuth environment variables (GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, GOOGLE_REDIRECT_URI, ADMIN_EMAIL)\n2. Frontend was calling wrong endpoint (/api/config instead of /api/auth/config)\n3. Docker compose had YAML syntax errors and deprecated version field\n4. Security issue: NEXT_PUBLIC_GOOGLE_CLIENT_ID was baked into Docker image via build args\n5. Unused OAuth callback page causing confusion\n\n**Changes:**\n- Remove deprecated `version` field from docker-compose.yml\n- Add missing Google OAuth environment variables to backend service\n- Remove build args from frontend (security fix - no secrets in images)\n- Fix frontend to call correct endpoint: /api/auth/config\n- Remove unused frontend/app/auth/callback/google/page.tsx\n- Add detailed comments explaining runtime configuration approach\n\n**How it works now:**\n- Frontend fetches Google Client ID at runtime from backend /api/auth/config\n- Backend verifies Google ID tokens using configured GOOGLE_CLIENT_ID\n- No secrets baked into Docker images (build once, deploy anywhere)\n- Client-side OAuth with ID tokens (simple, secure, better UX)\n\n**Testing:**\n- âœ… Backend /api/auth/config endpoint working: returns Google Client ID\n- âœ… Endpoint accessible via public FQDN through Cloudflare proxy\n- âœ… All containers healthy (backend, worker)\n- âœ… Frontend serving correctly\n\n**Note:** Frontend needs rebuild/redeploy to pick up the endpoint fix.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git push:*)",
      "Bash(gh run list:*)",
      "Bash(gh run watch:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nOrganize documentation and integrate Cursor rules\n\nThis commit organizes project documentation according to the Documentation Management rule and integrates Cursor editor rules into Claude Code workflow.\n\n**Documentation Organization:**\n- Move handover doc to docs/guides/google-oauth-fix-handover.md\n- All .md files now properly categorized under docs/ folder\n\n**Claude Code Integration:**\n- Create .claude/prompts/project-rules.md with 7 unbreakable rules:\n  1. Context Preservation - maintain context across sessions\n  2. Documentation Management - all .md in docs/ folder\n  3. Long Running Commands - timeouts and monitoring\n  4. Incremental Progress - small steps with verification\n  5. Pattern Consistency - follow existing patterns\n  6. User Experience First - clear communication\n  7. Bug Fix Verification - reproduce, fix, verify\n- Include project-specific context (tech stack, deployment info)\n- Add self-checking checklist for each response\n\n**Permissions:**\n- Update .claude/settings.local.json with bash command permissions\n- Allow ssh, scp, curl, git, and gh commands for deployment workflow\n\n**Purpose:**\nThese changes enable context preservation when switching between Claude Code instances (e.g., CLI to PyCharm plugin) and ensure consistent workflow following established project rules.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit:*)",
      "Bash(npx playwright test:*)",
      "Bash(npm install:*)",
      "Bash(npm test:*)",
      "Bash(npm test:coverage:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(chmod:*)"
    ],
    "deny": [],
    "ask": []
  }
}
